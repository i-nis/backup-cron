#!/bin/bash
#
# mysql_restore: script para restaurar bases de datos desde copia de respaldo.
#
# (C) 2006 - 2020 NIS
# Autor: Martin Andres Gomez Gimenez <mggimenez@nis.com.ar>
# Distributed under the terms of the GNU General Public License v3
#



# Funcion para mostrar advertencias
warning ()
{
  WARNING="\033[40m\033[1;33m${1}\033[0m"
  ADVERTENCE="\033[1;37m${2}\033[0m"
  echo
  echo -e "\a" "${WARNING}"
  echo -e " ${ADVERTENCE}"
  echo
}



no_file() {
  warning "ERROR" "No se especificó ningun archivo .tar.bz2. Vea:."
  echo " $(basename ${0}) --help"
  echo ""
  exit 1
}



# Función de ayuda del programa.
usage() {
  local PROG_NAME=$(basename ${0})
  local PROG_PATH=$(echo ${0} | sed -e 's,[\\/][^\\/][^\\/]*$,,')
  echo ""
  echo "${PROG_NAME}:"
  echo "Restaura bases de datos desde un archivo de copia de respaldo dado."
  echo ""
  echo "  Uso: "
  echo "       ${PROG_PATH}/${PROG_NAME} [-h|--help] [-d|--database] DATABASE [-l|--local] FILE.tar.bz2"
  echo ""
  echo "       --help, -h"
  echo "           Muestra esta ayuda."
  echo ""
  echo "       --database, -d"
  echo "           Base de datos a restaurar (opcional). Si se omite este parámetro,"
  echo "           se restaurarán todas las bases de datos."
  echo ""
  echo "       DATABASE"
  echo "           Nombre de la base de datos a restaurar (solo si se pasa la"
  echo "           opción -d ó --database)."
  echo ""
  echo "       --local, -l"
  echo "           Utiliza la configuración de bakup-cron almacenada en el archivo"
  echo "           de configuración /etc/backup-cron/backup-cron.conf."
  echo ""
  echo "       FILE.tar.bz2"
  echo "           Archivo de respaldo generado por la utilidad mysqldump.cron"
  echo ""
}



# Pregunta al usuario acerca de los datos de conexión al motor de bases de datos:
# Usuario, Contraseña y host.
set_mysql_credentials() {
  echo "Ingrese los siguientes datos para necesarios."
  read -p "Ingrese el usuario [root]: " BDB_USER

  if [ "${BDB_USER}" == "" ]; then
    BDB_USER="root"
  fi

  read -p "Ingrese la contraseña para el usuario ${BDB_USER}: " BDB_PASSWD
  read -p "Ingrese el nombre o la IP del servidor bases de datos [localhost]: " BDB_HOST

  if [ "${BDB_HOST}" == "" ]; then
    BDB_HOST="localhost"
  fi

  verify_mysql_connect "${BDB_USER}" "${BDB_PASSWD}" "${BDB_HOST}"
}



# Verifica los datos de conexión al servidor de bases de datos.
verify_mysql_connect() {
  local USER="${1}"
  local PASSWD="${2}"
  local HOST="${3}"

  # Verifica la contraseña.
  until mysql --user=${USER} --password=${PASSWD} --host=${HOST} --execute=';' ; do
    warning "ERROR" "No se pudo conectarse al motor de bases de datos."
    set_mysql_credentials
  done
}



# Función para seleccionar al azar un algoritmo de suma para comprobación.
ramdom_select_sum() {
  local NUM="$((1 + RANDOM % 3))"

  case ${NUM} in
    1 )
      SUM="md5sum"
      DIGEST="MD5"
      EXT="md5"
      ;;
    2 )
      SUM="sha1sum"
      DIGEST="SHA1"
      EXT="sha1"
      ;;
    3 )
      SUM="sha256sum"
      DIGEST="SHA256"
      EXT="sha256"
      ;;
  esac

}



# Verifica que exista el nombre del archivo de respaldo FILE.tar.bz2.
backup_file() {
  local FILE="${1}"

  if [ ! -e "${FILE}" ] || [ "${FILE}" == "" ]; then
      warning "ERROR" "No se encontró el archivo ${FILE}."
      exit
    else
      set_mysql_credentials

      if [ "${DATABASE_TO_RESTORE}" == "" ]; then
          BDB_FILE="${FILE}"
        else
          BDB_FILE="${FILE} ${DATABASE_TO_RESTORE}.sql"
      fi

  fi

}



# Verifica si el argumento es un archivo .tbz2
tbz2_verify() {
  local TEST="${1}"

  if [[ "${TEST}" == *".tar.bz2" ]]; then
        backup_file "${TEST}"
    elif [ "${TEST}" == "-h" ] || [ "${TEST}" == "--help" ]; then
      parameters "${TEST}"
    else
      no_file
      exit 1
  fi
}



# Verifica el correcto pasaje de parámetros.
function parameters() {
  local OPT=$(getopt \
              --options d:hl \
              --longoptions database:,help,local \
              --name 'mysql_restore' \
              -- "${@}")

  if [ $? -ne 0 ]; then
    echo 'Error en parámetros...' >&2
    exit 1
  fi

echo " opciones ${OPT}"
  eval set -- "${OPT}"

  while true; do

    case "$1" in
      -d | --database )
        DATABASE_TO_RESTORE="${2}"
        shift 2
        continue
        ;;

      -h | --help )
        usage
        exit
        ;;

      -l | --local )
        source /etc/backup-cron/backup-cron.conf
        shift
        continue
        ;;

      -- )
        shift
        break
        ;;

      * )
        warning "ERROR" "Error en parámetros. Vea:"
        echo " $(basename ${0}) --help"
        echo ""
        exit 1
        ;;
    esac

  shift
  done

}



# Inicio del programa.
DATABASE_TO_RESTORE=""
BDB_FILE=""

if [ "${#}" == "0" ]; then
    no_file
  elif [ "${#}" == "1" ]; then
    tbz2_verify "${1}"
  else
    parameters "${@}"
    tbz2_verify "${@: -1}"
fi

# Seleccionar al azar un algoritmo de suma.
ramdom_select_sum

warning "PASO 1 de 3:" "Verificando suma ${DIGEST} para el archivo ${BDB_FILE}."

if ${SUM} --check --status ${BDB_FILE}.${EXT}; then
  echo "La suma ${DIGEST} para el archivo ${BDB_FILE} es correcta."

  warning "PASO 2 de 3:" "Descomprimiento archivo ${BDB_FILE}."
  tar --bzip2 --extract --verbose --preserve-permissions --file ${BDB_FILE}

  DATABASES="$(ls -1 *.sql | grep --invert-match mysql.sql | awk 'BEGIN {FS = "."}; {print $1}')"
  MYSQL_OPTIONS="--batch --user=${BDB_USER} --password=${BDB_PASSWD} --host=${BDB_HOST}"
else
  warning "ERROR:" "La suma ${DIGEST} no coincidió para el archivo ${BDB_FILE}."
  exit
fi

warning "PASO 3 de 3:" "Restauración de bases de datos." 

for database in ${DATABASES}; do
  warning "RESTAURANDO..." "Importando base de datos ${database} en el servidor ${BDB_HOST}."
  mysql ${MYSQL_OPTIONS} --execute="DROP DATABASE IF EXISTS ${database};"
  mysql ${MYSQL_OPTIONS} --execute="CREATE DATABASE IF NOT EXISTS ${database};"

  if [ -x /usr/bin/pv ]; then
      pv ${database}.sql | mysql ${MYSQL_OPTIONS} --database=${database}
    else
      mysql ${MYSQL_OPTIONS} --database=${database} < ${database}.sql
  fi

  echo "La base de datos ${database} fue restaurada."
  rm ${database}.sql
done

rm -f mysql.sql

warning "IMPORTANTE:" "Todas las bases de datos fueron restauradas."

