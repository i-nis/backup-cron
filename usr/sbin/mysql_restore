#!/bin/bash
#
# mysql_restore: script para restaurar bases de datos desde copia de respaldo.
#
# (C) 2006 - 2021 NIS
# Autor: Martin Andres Gomez Gimenez <mggimenez@nis.com.ar>
# Distributed under the terms of the GNU General Public License v3
#



source /usr/libexec/backup-cron/backup-cron_functions.sh



# Función de ayuda del programa.
usage() {
  local PROG_NAME=$(basename ${0})
  local PROG_PATH=$(echo ${0} | sed -e 's,[\\/][^\\/][^\\/]*$,,')
  echo ""
  echo "${PROG_NAME}:"
  echo "Restaura bases de datos desde un archivo de copia de respaldo dado."
  echo ""
  echo "  Uso: "
  echo "       ${PROG_PATH}/${PROG_NAME} [-h|--help]"
  echo "       ${PROG_PATH}/${PROG_NAME} [-d|--database] DATABASE [-l|--local] FILE.tar.bz2"
  echo ""
  echo "       --help, -h"
  echo "           Muestra esta ayuda."
  echo ""
  echo "       --database, -d"
  echo "           Base de datos a restaurar (opcional). Si se omite este parámetro,"
  echo "           se restaurarán todas las bases de datos."
  echo ""
  echo "       DATABASE"
  echo "           Nombre de la base de datos a restaurar (solo si se pasa la"
  echo "           opción -d ó --database)."
  echo ""
  echo "       --local, -l"
  echo "           Utiliza la configuración de bakup-cron almacenada en el archivo"
  echo "           de configuración /etc/backup-cron/backup-cron.conf."
  echo ""
  echo "       FILE.tar.bz2"
  echo "           Archivo de respaldo generado por la utilidad mysqldump.cron"
  echo ""
}



# Pregunta al usuario acerca de los datos de conexión al motor de bases de datos:
# Usuario, Contraseña y host.
set_mysql_credentials() {
  echo "Ingrese los siguientes datos para necesarios."
  read -p "Ingrese el usuario [root]: " BDB_USER

  if [ "${BDB_USER}" == "" ]; then
    BDB_USER="root"
  fi

  read -p "Ingrese la contraseña para el usuario ${BDB_USER}: " BDB_PASSWD
  read -p "Ingrese el nombre o la IP del servidor bases de datos [localhost]: " BDB_HOST

  if [ "${BDB_HOST}" == "" ]; then
    BDB_HOST="localhost"
  fi

  verify_mysql_connect "${BDB_USER}" "${BDB_PASSWD}" "${BDB_HOST}"
}



# Verifica los datos de conexión al servidor de bases de datos.
verify_mysql_connect() {
  local USER="${1}"
  local PASSWD="${2}"
  local HOST="${3}"

  # Verifica la contraseña.
  until mysql --user=${USER} --password=${PASSWD} --host=${HOST} --execute=';' ; do
    warning "ERROR" "No se pudo conectarse al motor de bases de datos."
    set_mysql_credentials
  done
}


# Verifica la existencia de una base de datos pasada por parámetros.
database_exists() {
  local MY_DB_P="${1}"
  local MY_DB_FIND="$(grep ^${MY_DB_P}.sql$ ${BDB_FILE}.list)"

  if [ "${MY_DB_P}" != "" ] && [ "${MY_DB_P}.sql" != "${MY_DB_FIND}" ]; then
    warning "ERROR" "No existe en ${BDB_FILE}.list la base de datos seleccionada ${MY_DB_P}."
    exit 1
  fi

}



# Verifica si el argumento es un archivo .tbz2
tbz2_verify() {
  local TEST="${1}"

  if backup_file_exists "${TEST}"; then
      verify_set "${TEST}"
      set_mysql_credentials
      MYSQL_OPTIONS="--batch --user=${BDB_USER} --password=${BDB_PASSWD} --host=${BDB_HOST}"

      if [ "${DATABASE_TO_RESTORE}" != "ALL" ]; then
        database_exists "${DATABASE_TO_RESTORE}"
      fi

    elif [ "${TEST}" == "-h" ] || [ "${TEST}" == "--help" ]; then
      parameters "${TEST}"
    else
      file_no_exist "${TEST}"
  fi
}



# Verifica el correcto pasaje de parámetros.
function parameters() {
  local OPT=$(getopt \
              --options d:hl \
              --longoptions database:,help,local \
              --name 'mysql_restore' \
              -- "${@}")

  if [ $? -ne 0 ]; then
    echo 'Error en parámetros...' >&2
    exit 1
  fi

  eval set -- "${OPT}"

  while true; do

    case "$1" in
      -d | --database )
        DATABASE_TO_RESTORE="${2}"
        shift 2
        continue
        ;;

      -h | --help )
        usage
        exit
        ;;

      -l | --local )
        source /etc/backup-cron/backup-cron.conf
        shift
        continue
        ;;

      -- )
        shift
        break
        ;;

      * )
        warning "ERROR" "Error en parámetros. Vea:"
        echo " $(basename ${0}) --help"
        echo ""
        exit 1
        ;;
    esac

  shift
  done

}



# Función para restaurar una base de datos.
restore_database() {
  local MY_OPT="${1}"
  local MY_DB="${2}"

  if [ -e ${MY_DB}.sql ]; then
    warning "RESTAURANDO..." "Borrando, creando e importando base de datos ${MY_DB} en el servidor ${BDB_HOST}."
    mysql ${MY_OPT} --execute="DROP DATABASE IF EXISTS ${MY_DB};"
    mysql ${MY_OPT} --execute="CREATE DATABASE IF NOT EXISTS ${MY_DB};"

    if [ -x /usr/bin/pv ]; then
        pv ${MY_DB}.sql | mysql ${MY_OPT} --database=${MY_DB}
      else
        mysql ${MY_OPT} --database=${MY_DB} < ${MY_DB}.sql
    fi

    echo "La base de datos ${MY_DB} fue restaurada."
    rm ${MY_DB}.sql
  fi

}



# Inicio del programa.
BDB_FILE=""
BDB_FILE_X=""
DATABASE_TO_RESTORE="ALL"
DECRIPT_FILE=""
DIGEST=""
EXT=""
SUM=""

if [ "${#}" == "0" ]; then
    no_file
  elif [ "${#}" == "1" ]; then
    tbz2_verify "${1}"
  else
    parameters "${@}"
    tbz2_verify "${@: -1}"
fi

# Seleccionar al azar un algoritmo de suma.
ramdom_select_sum

warning "PASO 1 de 3:" "Verificando suma ${DIGEST} para el archivo ${BDB_FILE}."

if ${SUM} --check --status ${BDB_FILE}.${EXT}; then
  echo "La suma ${DIGEST} para el archivo ${BDB_FILE} es correcta."

    # Desencriptar respaldo
    if [ "${PGP_ID}" != "" ]; then
        DECRIPT_FILE=$(file_decrypt "${BDB_FILE}")
      else
        DECRIPT_FILE="${BDB_FILE}"
    fi

    warning "PASO 2 de 3:" "Descomprimiento archivo ${DECRIPT_FILE}."

    if [ "${DATABASE_TO_RESTORE}" == "ALL" ]; then
        tar ${TAR_OPTIONS} --file ${DECRIPT_FILE}
        warning "PASO 3 de 3:" "Restauración de bases de datos."
        # Se genera el listado de bases de datos restante a restaurar.
        DATABASES="$(ls -1 *.sql | grep --invert-match mysql.sql | awk 'BEGIN {FS = "."}; {print $1}')"

        for database in ${DATABASES}; do
          restore_database "${MYSQL_OPTIONS}" "${database}"
        done
        
      else
        tar ${TAR_OPTIONS} --file ${DECRIPT_FILE} ${DATABASE_TO_RESTORE}.sql
        warning "PASO 3 de 3:" "Restauración de bases de datos."
        restore_database "${MYSQL_OPTIONS}" "${DATABASE_TO_RESTORE}"
    fi

  else
    warning "ERROR:" "La suma ${DIGEST} no coincidió para el archivo ${BDB_FILE}."
    exit
fi

if [ -e mysql.sql ]; then
  rm -f mysql.sql
fi

warning "IMPORTANTE:" "Todas las bases de datos fueron restauradas."

