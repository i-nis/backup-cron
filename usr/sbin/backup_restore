#!/bin/bash
#
# backup_restore: script para restaurar respaldos totales e incrementales.
#
# (C) 2006 - 2021 NIS
# Autor: Martin Andres Gomez Gimenez <mggimenez@nis.com.ar>
# Distributed under the terms of the GNU General Public License v3
#



source /etc/backup-cron/backup-cron.conf
source /usr/libexec/backup-cron/backup-cron_functions.sh



# Función de ayuda del programa.
usage() {
  local PROG_NAME=$(basename ${0})
  local PROG_PATH=$(echo ${0} | sed -e 's,[\\/][^\\/][^\\/]*$,,')
  echo ""
  echo "${PROG_NAME}:"
  echo "Restaura copias de respaldo desde un conjunto de respaldo dado."
  echo ""
  echo "  Uso: "
  echo "       ${PROG_PATH}/${PROG_NAME} [-h|--help]"
  echo "       ${PROG_PATH}/${PROG_NAME} FILE.tar.bz2"
  echo "       ${PROG_PATH}/${PROG_NAME} [-i|--incremental] FECHA FILE-full.tar.bz2"
  echo ""
  echo "       FECHA"
  echo "           Fecha del último respaldo incremental a restaurar en formato"
  echo "           AAAAMMDD."
  echo ""
  echo "       --help, -h"
  echo "           Muestra esta ayuda."
  echo ""
  echo "       --incremental, -i"
  echo "           Dado un respaldo full, respalda también los incrementales hasta"
  echo "           una fecha dada por FECHA. Si no se especifica FECHA, respalda"
  echo "           todos los incrementales que existan."
  echo ""
  echo "       FILE.tar.bz2"
  echo "           Archivo de respaldo generado por la utilidad mysqldump.cron"
  echo ""
}



# Dado un argumento verifica si se trata de un archivo .tar.bz2 o .tar.bz2.gpg.
# TEST: argumento a verificar.
#
tbz2_verify() {
  local TEST="${1}"

  if backup_file_exists "${TEST}"; then
      verify_set "${TEST}"
      BACKUP_FILE="${TEST}"
    elif [ "${TEST}" == "-h" ] || [ "${TEST}" == "--help" ]; then
      parameters "${TEST}"
    else
      file_no_exist "${TEST}"
  fi
}



# Verifica el correcto pasaje de parámetros.
function parameters() {
  local OPT=$(getopt \
              --options hi: \
              --longoptions help,incremental: \
              --name 'backup_restore' \
              -- "${@}")

  if [ $? -ne 0 ]; then
    echo 'Error en parámetros...' >&2
    exit 1
  fi

  eval set -- "${OPT}"

  while true; do

    case "$1" in
      -h | --help )
        usage
        exit
        ;;

      -i | --incremental )
        DATE_TO_RESTORE="${2}"
        shift
        continue
        ;;

      -- )
        shift
        break
        ;;

      * )
        warning "ERROR" "Error en parámetros. Vea:"
        echo " $(basename ${0}) --help"
        echo ""
        exit 1
        ;;
    esac

  shift
  done

}



# Función para desencriptar y desempaquetar respaldos incrementales recursivamente,
# desde la fecha del archivo completo hasta la fecha dada mediante --incremental FECHA.
# Si no se especifica --incremental FECHA, solo restaura el respaldo completo.
# FILE: archivo de respaldo completo (full).
# DATE_END: Fecha del último respaldo incremental a restaurar.
#
function recursive_unpack() {
  local FILE="${1}"
  local DATE_END="${2}"
  local DATE_START=$(echo "${FILE}" | awk -F .tar '{print $(1)}' | awk -F - '{print $(NF)}')
  local FILE_NAME=$(echo "${FILE}" | awk -F "${DATE_START}" '{print $(1)}')
  local FILE_EXT=$(echo "${FILE}" | awk -F "${DATE_START}" '{print $(2)}')
  local date=""

  if [ "${DATE_END}" == "" ]; then
    DATE_END=$(ls -1 *${DATE_START* | tail -1 | awk -F .tar '{print $(1)}' | awk -F - '{print $(NF)}'})
  fi

  for ((date=${DATE_START}; date<=${DATE_END}; date++)); do
    ramdom_select_sum
    warning "ATENCIÓN:" "Verificando suma ${DIGEST} para el archivo ${FILE_NAME}${date}${FILE_EXT}."
    nine_seconds

    if ${SUM} --check --status ${FILE_NAME}${date}${FILE_EXT}; then
        echo "La suma ${DIGEST} para el archivo ${FILE_NAME}${date}${FILE_EXT} es correcta."
        warning "ATENCIÓN:" "Comenzando a desempaquetar el respaldo ${FILE_NAME}${date}${FILE_EXT}."
        nine_seconds
        unpack "${FILE_NAME}${date}${FILE_EXT}"
      else
        warning "ERROR:" "La suma ${DIGEST} no coincidió para el archivo ${FILE_NAME}${date}${FILE_EXT}."
        exit 1
    fi

  done

}



# Inicio del programa.
BACKUP_FILE=""
DATE_TO_RESTORE=""
DIGEST=""
EXT=""
SUM=""

if [ "${#}" == "0" ]; then
    no_file
  elif [ "${#}" == "1" ]; then
    tbz2_verify "${1}"
  else
    parameters "${@}"
    tbz2_verify "${@: -1}"
fi

recursive_unpack "${BACKUP_FILE}" "${DATE_TO_RESTORE}"

