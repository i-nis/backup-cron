#!/bin/bash
#
# check_backup-cron: script para verificar existencias de copias de seguridad.
#
# (C) 2006 - 2021 NIS
# Autor: Martin Andres Gomez Gimenez <mggimenez@nis.com.ar>
# Distributed under the terms of the GNU General Public License v3
#



source /etc/backup-cron/backup-cron.conf
source /usr/libexec/backup-cron/backup-cron_functions.sh

TYPE="${2}"



function usage() {
  PROGNAME=$(basename $0)
  PROGPATH=$(echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,')
  echo "${PROGNAME}:"
  echo "Verifica si se han realizado copias de seguridad mediante Backup-cron"
  echo
  echo "Uso: "
  echo "${PROGPATH}/${PROGNAME} -t <TIPO>"
  echo
  echo "-t, --type      tipo de respaldo a verificar."
  echo
  echo "TIPO puede ser uno de los siguientes:"
  echo "  etc          respaldos realizados por backup_etc.cron"
  echo "  home         respaldos realizados por backup_home.cron"
  echo "  libvirt      respaldos realizados por backup_libvirt.cron"
  echo "  mysql        respaldos realizados por mysqldump.cron"
  echo "  postgresql   respaldos realizados por pg_dump.cron"
  echo "  system       respaldos realizados por backup_raiz.cron"
}



function status() {
  local STATE=${1}

  case ${STATE} in
    0 )
      STATUS="Ok"
      echo "${STATUS}: backup ${DESC} was done without problems."
      return 0
      ;;
    [1-29] )
      STATUS="Warning"
      echo "${STATUS}: last backup ${DESC} was performed ${STATE} day ago."
      return 0
      ;;
    30 )
      STATUS="Critical"
      echo "${STATUS}: there are no backups ${DESC} made in the last ${STATE} days."
      return 2
      ;;
    99 )
      STATUS="Critical"
      echo "${STATUS}: there are errors on backups ${DESC}."
      return 2
      ;;
    * )
      STATUS="Unknown"
      echo "${STATUS}."
      return 3
      ;;
  esac

}



if [ "${1}" != "-t" ] && [ "${1}" != "--type" ] || [ "${#}" != "2" ]; then
  usage
  status 99
  exit
fi



case ${TYPE} in
  etc )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="backup-${HOST}-${TYPE}"
      EXT="tar.bz2"
      DESC="of /etc directory"
  ;;
  home )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="backup-${HOST}-${TYPE}-admin"
      EXT="tar.bz2"
      DESC="of /home directory"
  ;;
  libvirt )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="$(virsh list --name | head -1)"
      EXT="qcow2"
      DESC="of virtual machines"
  ;;
  mysql )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="backup-${HOST}-${TYPE}"
      EXT="tar.bz2"
      DESC="of MySQL databases"
  ;;
  postgresql )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="backup-${HOST}-${TYPE}"
      EXT="tar.bz2"
      DESC="of PostgreSQL databases"
  ;;
  system )
      BACKUP_PATH="${BACKUP_PATH}/${HOST}/${TYPE}"
      FILE_BACKUP="backup-${HOST}-raiz"
      EXT="tar.bz2"
      DESC="of system"
  ;;
  * )
    usage
    exit
  ;;
esac

# Se busca el último backup realizado dentro de los últimos 30 días.
for i in {0..30}; do
  FECHA=$(date --date="${i} days ago" +%Y%m%d)

  if [ "${PGP_ID}" != "" ]; then
      BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-${FECHA}.${EXT}.gpg"
      FULL_BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-full-${FECHA}.${EXT}.gpg"
      INCREMENTAL_BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-incremental-${FECHA}.${EXT}.gpg"
    else
      BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-${FECHA}.${EXT}"
      FULL_BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-full-${FECHA}.${EXT}"
      INCREMENTAL_BACKUP="${BACKUP_PATH}/${FILE_BACKUP}-incremental-${FECHA}.${EXT}"
  fi

  if [ -f ${BACKUP} ] || [ -f ${FULL_BACKUP} ] || [ -f ${INCREMENTAL_BACKUP} ]; then

      # Se verifica que los respaldos realizados se correspondan con el número
      # de bases de datos MySQL exitentes.
      if [ "${TYPE}" == "mysql" ]; then
        DB_NUM=$(show_databases_mysql ${BDB_USER} ${BDB_PASSWD} ${BDB_HOST} 2>&1 | grep -v "Warning: Using a password" | wc -l)
        FILE_BACKUP_DB_NUM=$(cat ${BACKUP}.list | wc -l)

        if [ ${DB_NUM} -eq ${FILE_BACKUP_DB_NUM} ]; then
            status ${i}
            exit $?
          else
            status 99
            exit $?
        fi

        break
      fi

      # Se verifica que los respaldos realizados se correspondan con el número
      # de bases de datos PostgreSQL exitentes.
      if [ "${TYPE}" == "postgresql" ]; then
        export PGPASSWORD=${BDB_PG_PASSWD}
        DB_PG_NUM=$(show_databases_pg ${BDB_PG_USER} ${BDB_PG_PASSWD} ${BDB_PG_HOST} | wc -l)
        FILE_BACKUP_PG_NUM=$(cat ${BACKUP}.list | wc -l)

        if [ ${DB_PG_NUM} -eq ${FILE_BACKUP_PG_NUM} ]; then
            status ${i}
            exit $?
          else
            status 99
            exit $?
        fi

        break
      fi

      if [ "${TYPE}" == "etc" ] || [ "${TYPE}" == "home" ] || [ "${TYPE}" == "libvirt" ] \
         || [ "${TYPE}" == "system" ]; then
          status 0
        else
          status ${i}
          exit $?
      fi

      break
    else

      if (( ${i} == 30 )); then
        status ${i}
        exit $?
      fi

  fi

done

