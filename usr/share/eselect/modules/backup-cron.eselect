# -*-eselect-*-  vim: ft=eselect
# Copyright 2005-2019 Gentoo Authors
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manage the backup-cron symlinks"
MAINTAINER="mggimenez@nis.com.ar"
SCHEDULES="daily monthly weekly"

# find a list of backup-cron symlink targets
find_targets() {
	local FILE

	for FILE in "${EROOT}"/usr/sbin/{*backup*,mysqldump,pg_dump}.cron; do
		[[ -f ${FILE} ]] && basename "${FILE}"
	done
}

# set the Backup-cron symlink
set_symlink() {
	local schedule=${1}
	local target=${2}

	if is_number "${target}"; then
			local targets=( $(find_targets) )
			target=${targets[target-1]}
		else
			check_target ${target}
	fi

	if [[ ! -h ${EROOT}/etc/cron.${schedule}/${target} ]]; then
		ln -s /usr/sbin/${target} ${EROOT}/etc/cron.${schedule}/${target}
	fi
}

# unset the Backup-cron symlink
unset_symlink() {
	local schedule=${1}
	local target=${2}

	if is_number "${target}"; then
			local targets=( $(find_targets) )
			target=${targets[target-1]}
		else
			check_target ${target}
	fi

	if [[ -h ${EROOT}/etc/cron.${schedule}/${target} ]]; then
		rm -f ${EROOT}/etc/cron.${schedule}/${target}
	fi
}

# Return if given valid schedule name.
check_schedule() {
	local schedule="${1}"
	has "${schedule}" ${SCHEDULES} || \
		die -q "Please choose one of the following cron schedules type: ${SCHEDULES}"
}

# Return if given valid target name.
check_target() {
	local target="${1}"
	local targets=( $(find_targets) )
	has "${target}" ${targets} || \
		die -q "Please choose one of the following cron schedules type: ${targets[@]}"
}

### Clean all symlinks ###
describe_clean() {
	echo "Clear all schedule for all Backup-cron targets."
}

do_clean() {
	write_list_start "Removed symlinks for all backup targets."
	local i schedule targets=( $(find_targets) )

	for schedule in ${SCHEDULES}; do

		for (( i = 0; i < ${#targets[@]}; i++ )); do
			rm -f ${EROOT}/etc/cron.${schedule}/${targets[i]}
		done

	done
}

### show action ###

describe_show() {
	echo "Show the current Backup-cron symbolic links enabled."
}

do_show() {
	write_list_start "Current Backup-cron symbolic links enabled:"
	local i schedule targets=( $(find_targets) )

	for schedule in ${SCHEDULES}; do

		for (( i = 0; i < ${#targets[@]}; i++ )); do

			if [[ -L ${EROOT}/etc/cron.${schedule}/${targets[i]} ]]; then
				write_kv_list_entry "${EROOT}/etc/cron.${schedule}/${targets[i]}"
			fi

		done

	done
}

### list action ###

describe_list() {
	echo "List available Backup-cron symlink targets"
}

describe_list_parameters() {
	echo "<schedule>"
}

describe_list_options() {
	echo "schedule: One of the following cron schedules type: ${SCHEDULES}"
}

do_list() {
	local schedule="${1}"
	local i targets=( $(find_targets) )

	write_list_start "Available Backup-cron symlink targets for /etc/cron.${schedule}:"
	check_schedule ${schedule}

	for (( i = 0; i < ${#targets[@]}; i++ )); do
		# highlight the target where the symlink is pointing to
		[[ ${targets[i]} = \
			$(basename "$(readlink -e "${EROOT}/etc/cron.${schedule}/${targets[i]}")") ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done

	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set a new Backup-cron symlink target"
}

describe_set_parameters() {
	echo "<schedule> <target>"
}

describe_set_options() {
	echo "schedule: One of the following cron schedules type: ${SCHEDULES}"
	echo "target: Target name or number (from 'list' action)"
}

do_set() {
	[[ -z $2 ]] && die -q "You didn't tell me what to set the symlink to"
	[[ $# -gt 2 ]] && die -q "Too many parameters"
	local schedule="${1}"
	local target="${2}"
	set_symlink "${schedule}" "${target}" || die -q "Couldn't set a new symlink"
}

### unset action ###

describe_unset() {
	echo "Disable an existing Backup-cron symlink."
}

describe_unset_parameters() {
	echo "<schedule> <target>"
}

describe_unset_options() {
	echo "schedule: One of the following cron schedules type: ${SCHEDULES}"
	echo "target: Target name or number (from 'list <schedule>' action)"
}

do_unset() {
	[[ -z $2 ]] && die -q "You didn't tell me what to set the symlink to"
	[[ $# -gt 2 ]] && die -q "Too many parameters"
	local schedule="${1}"
	local target="${2}"
	unset_symlink "${schedule}" "${target}" || die -q "Couldn't set a new symlink"
}

## list-schedule action

describe_list-schedules() {
	echo "Output a space-separated list of valid cron schedules"
}

do_list-schedules() {
	echo "${SCHEDULES}"
}

